# This security configuration file is an important part of the app.

# You can read more about security in the related section of the documentation
# http://symfony.com/doc/current/book/security.html
security:
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
        # We still need this or some command-lines will fail
        # @lutangar if you can explain this to me !?!
        Symfony\Component\Security\Core\User\User: plaintext
        # The "real" encoder is that one, the usual bcrypt
        Give2Peer\Give2PeerBundle\Entity\User:
            algorithm: bcrypt
            cost: 11

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
    # We're probably going to give additional roles to users that gain levels.
    # Unless we should use the roles for dictatorial moderation only, privileges
    # I (and the other devs) get to attribute to whomever I please ? Or both ?
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        # We don't use them, not even for testing.
        # I don't have the heart to remove the lines though, as they might be
        # useful in case of emergency on the server.
#        in_memory:
#            memory:
#                users:
#                    user:  { password: userpass,  roles: [ 'ROLE_USER'  ] }
#                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
        # We use `FOSUserBundle`, with a custom user class, named `Peer` in the
        # database because `User` is a reserved word.
        # I don't want to create a system user for pgSQL every time a user signs
        # up, but maybe it should be how it's done.
        fos_userbundle:
            id: fos_user.user_provider.username

    # The main part of the security, where you can set up firewalls
    # for specific sections of your app
    # (/v[\d]+)? matches the version prefixes `v1`, `v2`, etc.
    firewalls:
        # Disables authentication for assets and the profiler
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # The ping
        rest_hello:
            pattern:  ^(/v[\d]+)?/hello$
            security: false
        # The registration
        rest_register:
            pattern:  ^(/v[\d]+)?/user$
            methods: [POST]
            security: false
        # The root of the API -> its doc
        rest_index:
            pattern:  ^/(v[\d]+)?$
            security: false
        # The CRON tasks
        # These are run automatically by the webserver itself
        # eg: /v1/cron/daily every day
        rest_cron:
            pattern:  ^(/v[\d]+)?/cron/(monkey|hourly|daily|weekly|monthly)$
            security: false
        # The private API (everything else)
        rest_api:
            pattern:   ^/v[\d]+
            stateless: true
            http_basic:
                realm: "The Karmic Realm"
                provider: fos_userbundle

    # with these settings you can restrict or allow access for different parts
    # of your application based on roles, ip, host or methods
    # http://symfony.com/doc/current/cookbook/security/access_control.html
    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }