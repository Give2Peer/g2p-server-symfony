# you can read more about security in the related section of the documentation
# http://symfony.com/doc/current/book/security.html
security:
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
        # We still need this or some command-lines will fail
        Symfony\Component\Security\Core\User\User: plaintext
        # The "real" encoder is that one :
        Give2Peer\Give2PeerBundle\Entity\User:
            algorithm: bcrypt
            cost: 13

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        # If testing fails, try restoring those ?
#        in_memory:
#            memory:
#                users:
#                    test:  { password: testpass, roles: [ 'ROLE_USER' ] }
#                    user:  { password: userpass, roles: [ 'ROLE_USER' ] }
#                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
        fos_userbundle:
            id: fos_user.user_provider.username

    # The main part of the security, where you can set up firewalls
    # for specific sections of your app
    # (/v[\d]+)? matches the version prefixes `v1`, `v2`, etc.
    firewalls:
        # Disables authentication for assets and the profiler
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # The ping
        rest_hello:
            pattern:  ^(/v[\d]+)?/hello$
            security: false
        # The registration
        # paper cut: this does not but *should* only allow POST through
        # we'll put a 404 on GET /users for now
        # it's no big matter anyway if our user list is public,
        # as long as it's censored of private informations, which it should be
        # even if only our users may access it. Censorship... Obscenity...
        rest_register:
            pattern:  ^(/v[\d]+)?/user$
            methods: [POST]
            security: false
        # The root of the API -> its doc
        rest_index:
            pattern:  ^/(v[\d]+)?$
            security: false
        # The CRON tasks
        # These are run by the webserver itself
        # /v1/cron/daily every day
        rest_cron:
            pattern:  ^/?(v[\d]+)?/cron/(monkey|hourly|daily|weekly|monthly)$
            security: false
        # The private API (everything else ?)
        rest_api:
            pattern:   ^/(v[\d]+)
            stateless: true
            http_basic:
                realm: "The Karmic Realm"
                provider: fos_userbundle

        # the login page has to be accessible for everybody
#        demo_login:
#            pattern:  ^/demo/secured/login$
#            security: false
        # secures part of the application
#        demo_secured_area:
#            pattern:    ^/demo/secured/
#            # it's important to notice that in this case _demo_security_check and _demo_login
#            # are route names and that they are specified in the AcmeDemoBundle
#            form_login:
#                check_path: _demo_security_check
#                login_path: _demo_login
#            logout:
#                path:   _demo_logout
#                target: _demo
#            #anonymous: ~
#            #http_basic:
#            #    realm: "Secured Demo Area"

    # with these settings you can restrict or allow access for different parts
    # of your application based on roles, ip, host or methods
    # http://symfony.com/doc/current/cookbook/security/access_control.html
    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }