#!/bin/bash

# CONFIGURATION ################################################################

USER=web
SERVER=web.qrok.me
REMOTE_DIR=/home/web/g2p.give2peer.org

DATETIME=$(date +"%Y%m%d%H%M%S")
SQL_FILE="g2p_dump_${DATETIME}.pgdump"

# when you also want to restore the backup locally
LOCAL_PG_USER=give2peer
LOCAL_PG_DATABASE=give2peer


# COLORS #######################################################################

Off='\033[0m'             # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White


# MAKE THE DUMP ################################################################

echo -e "${Yellow}Asking the server to dump the SQL...${Off}"
ssh $USER@$SERVER <<-ENDSSH

    # Commands to run on remote host
    cd ${REMOTE_DIR}
    PWD=$(pwd)
    echo "Moved to ${PWD}."
    echo "Dumping the database to ${SQL_FILE}..."
    pg_dump -Fc give2peer > ${SQL_FILE}

ENDSSH


# RETRIEVE THE SQL DUMP ########################################################

echo -e "${Yellow}Retrieving the SQL dump...${Off}"
scp $USER@$SERVER:${REMOTE_DIR}/${SQL_FILE} ${SQL_FILE}
if [ -f ${SQL_FILE} ]
then
    echo "Retrieved the dump from ${REMOTE_DIR}/${SQL_FILE}"
else
    echo -e "${BRed}Failed to retrieve the dump from ${REMOTE_DIR}/${SQL_FILE} !${Off}"
    exit
fi


# INSTALL THE SQL DUMP IN THE LOCAL DATABASE ###################################

# Only if the user wants to : default means no, timeout (5s) means no.
# I get that this script relies heavily on local database configuration.
# It should not be commited ; just forget you ever saw this file.

INSTALL_HERE=y  # don't get fooled, the default value is No
[[ -t 0 ]] && {
    echo -e "${Yellow}Restore the dump locally?${Off}"
    echo -e "${Red}This will drop your ${LOCAL_PG_DATABASE} database!${Off}"
    echo -e "${BGreen}(y/N)${Off}"
    read -t 5 -n 1 -p $'' INSTALL_HERE || INSTALL_HERE=n ;
}
echo -e ""  # new line
if [[ $INSTALL_HERE =~ ^(y|Y)$ ]]
then
    echo -e "${Yellow}Installing here...${Off}"
    echo -e "Connecting as local user ${LOCAL_PG_USER}..."

sudo su ${LOCAL_PG_USER} <<-ENDPSQL

    dropdb --if-exists ${LOCAL_PG_DATABASE}
    createdb ${LOCAL_PG_DATABASE}
    pg_restore --no-privileges --single-transaction --dbname=${LOCAL_PG_DATABASE}hg ${SQL_FILE}

    # psql --set ON_ERROR_STOP=on --single-transaction ${LOCAL_PG_DATABASE} < ${SQL_FILE}

    # not sure this works. Maybe because of the HEREDOC ?
    if [ $? -ne 0 ]  # fixme
    then
        echo -e "${BRed}Failed with status code ${nok}.${Off}"
    fi

ENDPSQL

else
    echo -e "Chose not to restore."
fi


# ALL DONE ! ###################################################################

echo -e "\n${BGreen}Done !${Off}"


# GRANT ENOUGH PERMISSIONS TO YOUR USER TO DUMP ################################

<<"COMMENT"

Connect to give2peer database with user postgres :

su postgres -
psql -d give2peer

then (see bottom):

GRANT ALL PRIVILEGES ON DATABASE give2peer to web;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO web;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO web;

But this only does it for existing tables !

A more robust way :

GRANT CONNECT
ON DATABASE give2peer
TO web;

ALTER DEFAULT PRIVILEGES
FOR USER web
IN SCHEMA public
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO web;

ALTER DEFAULT PRIVILEGES
FOR USER web
IN SCHEMA public
GRANT ALL PRIVILEGES ON SEQUENCES TO web;


Still not enough ?!
ERREUR:  droit refusÃ© pour la relation item_id_seq
But I GRANTed ALL to sequences ?!?

The following works, but it's overkill :

ALTER USER web WITH SUPERUSER;

From the doc :
pg_dump is a regular PostgreSQL client application.
pg_dump does not operate with special permissions.
In particular, it must have read access to all tables that you want to back up,
so in practice you almost always have to run it as a database superuser.


COMMENT
